/*
 * This file is generated by jOOQ.
 */
package org.dakhli.elyes.contactapp.infra.data.jooq.model.tables;


import java.util.Collection;

import org.dakhli.elyes.contactapp.infra.data.jooq.model.Keys;
import org.dakhli.elyes.contactapp.infra.data.jooq.model.Public;
import org.dakhli.elyes.contactapp.infra.data.jooq.model.tables.records.ContactRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Contact extends TableImpl<ContactRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.CONTACT</code>
     */
    public static final Contact CONTACT = new Contact();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ContactRecord> getRecordType() {
        return ContactRecord.class;
    }

    /**
     * The column <code>PUBLIC.CONTACT.ID</code>.
     */
    public final TableField<ContactRecord, String> ID = createField(DSL.name("ID"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CONTACT.FIRSTNAME</code>.
     */
    public final TableField<ContactRecord, String> FIRSTNAME = createField(DSL.name("FIRSTNAME"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CONTACT.LASTNAME</code>.
     */
    public final TableField<ContactRecord, String> LASTNAME = createField(DSL.name("LASTNAME"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CONTACT.TEL</code>.
     */
    public final TableField<ContactRecord, String> TEL = createField(DSL.name("TEL"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CONTACT.EMAIL</code>.
     */
    public final TableField<ContactRecord, String> EMAIL = createField(DSL.name("EMAIL"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private Contact(Name alias, Table<ContactRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Contact(Name alias, Table<ContactRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>PUBLIC.CONTACT</code> table reference
     */
    public Contact(String alias) {
        this(DSL.name(alias), CONTACT);
    }

    /**
     * Create an aliased <code>PUBLIC.CONTACT</code> table reference
     */
    public Contact(Name alias) {
        this(alias, CONTACT);
    }

    /**
     * Create a <code>PUBLIC.CONTACT</code> table reference
     */
    public Contact() {
        this(DSL.name("CONTACT"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ContactRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_6;
    }

    @Override
    public Contact as(String alias) {
        return new Contact(DSL.name(alias), this);
    }

    @Override
    public Contact as(Name alias) {
        return new Contact(alias, this);
    }

    @Override
    public Contact as(Table<?> alias) {
        return new Contact(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Contact rename(String name) {
        return new Contact(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Contact rename(Name name) {
        return new Contact(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Contact rename(Table<?> name) {
        return new Contact(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Contact where(Condition condition) {
        return new Contact(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Contact where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Contact where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Contact where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Contact where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Contact where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Contact where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Contact where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Contact whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Contact whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
